<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RAGENativeUI</name>
    </assembly>
    <members>
        <member name="E:RAGENativeUI.BaseCollection`1.ItemAdded">
            <summary>
            Occurs when an item is added to this <see cref="T:RAGENativeUI.BaseCollection`1"/> using <see cref="M:RAGENativeUI.BaseCollection`1.Add(`0)"/>.
            </summary>
        </member>
        <member name="E:RAGENativeUI.BaseCollection`1.ItemRemoved">
            <summary>
            Occurs when an item is removed from this <see cref="T:RAGENativeUI.BaseCollection`1"/> using <see cref="M:RAGENativeUI.BaseCollection`1.Remove(`0)"/> or <see cref="M:RAGENativeUI.BaseCollection`1.RemoveAt(System.Int32)"/>.
            </summary>
        </member>
        <member name="E:RAGENativeUI.BaseCollection`1.ItemModified">
            <summary>
            Occurs when an item is modified in this <see cref="T:RAGENativeUI.BaseCollection`1"/> using <see cref="P:RAGENativeUI.BaseCollection`1.Item(System.Int32)"/>.
            </summary>
        </member>
        <member name="E:RAGENativeUI.BaseCollection`1.Cleared">
            <summary>
            Occurs when all the items of this <see cref="T:RAGENativeUI.BaseCollection`1"/> are removed using <see cref="M:RAGENativeUI.BaseCollection`1.Clear"/>.
            </summary>
        </member>
        <member name="P:RAGENativeUI.BaseCollection`1.Count">
            <summary>
            Gets the number of elements contained in this <see cref="T:RAGENativeUI.BaseCollection`1"/>.
            </summary>
        </member>
        <member name="P:RAGENativeUI.BaseCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this <see cref="T:RAGENativeUI.BaseCollection`1"/> is read-only.
            </summary>
        </member>
        <member name="P:RAGENativeUI.BaseCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <value>
            The item.
            </value>
            <param name="index">The index.</param>
            <returns>
            The item at the specified index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            </exception>
        </member>
        <member name="M:RAGENativeUI.BaseCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.BaseCollection`1"/> class that is empty.
            </summary>
        </member>
        <member name="M:RAGENativeUI.BaseCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.BaseCollection`1"/> class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:RAGENativeUI.BaseCollection`1.Add(`0)">
            <summary>
            Adds an item to this <see cref="T:RAGENativeUI.BaseCollection`1" />.
            </summary>
            <param name="item">The item to add to this <see cref="T:RAGENativeUI.BaseCollection`1" />.</param>
        </member>
        <member name="M:RAGENativeUI.BaseCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from this <see cref="T:RAGENativeUI.BaseCollection`1"/>.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:RAGENativeUI.BaseCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of the specified item from this <see cref="T:RAGENativeUI.BaseCollection`1"/>.
            </summary>
            <param name="item">The item to remove from this <see cref="T:RAGENativeUI.BaseCollection`1"/>.</param>
            <returns>
            <c>true</c> if the <paramref name="item"/> was successfully removed from this <see cref="T:RAGENativeUI.BaseCollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:RAGENativeUI.BaseCollection`1"/>.
            </returns>
        </member>
        <member name="M:RAGENativeUI.BaseCollection`1.Clear">
            <summary>
            Removes all items from this <see cref="T:RAGENativeUI.BaseCollection`1"/>.
            </summary>
        </member>
        <member name="M:RAGENativeUI.BaseCollection`1.Contains(`0)">
            <summary>
            Determines whether this <see cref="T:RAGENativeUI.BaseCollection`1"/> contains a specific item.
            </summary>
            <param name="item">The item to locate in this <see cref="T:RAGENativeUI.BaseCollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in this <see cref="T:RAGENativeUI.BaseCollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:RAGENativeUI.BaseCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of this <see cref="T:RAGENativeUI.BaseCollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from this <see cref="T:RAGENativeUI.BaseCollection`1"/>. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:RAGENativeUI.BaseCollection`1.IndexOf(`0)">
            <summary>
            Searches for the specified item and returns the zero-based index of the first occurrence within the entire <see cref="T:RAGENativeUI.BaseCollection`1"/>.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>The zero-based index of the first occurrence of the item within the entire <see cref="T:RAGENativeUI.BaseCollection`1"/>, if found; otherwise, â€“1.</returns>
        </member>
        <member name="M:RAGENativeUI.BaseCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:RAGENativeUI.Common.EFont">
            <summary>
            Fonts used by GTA V
            </summary>
        </member>
        <member name="M:RAGENativeUI.Common.IsDisabledControlPressed(System.Int32,Rage.GameControl)">
            <summary>
            Check if a Rage.GameControl is pressed while it's disabled
            </summary>
            <param name="index"></param>
            <param name="control"></param>
            <returns>true if a Rage.GameControl is pressed while it's disabled</returns>
        </member>
        <member name="M:RAGENativeUI.Common.IsDisabledControlJustPressed(System.Int32,Rage.GameControl)">
            <summary>
            Check if a Rage.GameControl is just pressed while it's disabled
            </summary>
            <param name="index"></param>
            <param name="control"></param>
            <returns>true if a Rage.GameControl is just pressed while it's disabled</returns>
        </member>
        <member name="M:RAGENativeUI.Common.IsDisabledControlJustReleased(System.Int32,Rage.GameControl)">
            <summary>
            Check if a Rage.GameControl is just released while it's disabled
            </summary>
            <param name="index"></param>
            <param name="control"></param>
            <returns>true if a Rage.GameControl is just released while it's disabled</returns>
        </member>
        <member name="M:RAGENativeUI.Common.GetPressedKeys">
            <summary>
            Gets the current pressed keys.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.ICollection`1"/> with the current pressed keys.</returns>
        </member>
        <member name="M:RAGENativeUI.Common.WriteFileFromResources(System.Reflection.Assembly,System.String)">
            <summary>
            Save an embedded resource to a temporary file.
            </summary>
            <param name="yourAssembly">Your executing assembly.</param>
            <param name="fullResourceName">Resource name including your solution name. E.G MyMenuMod.banner.png</param>
            <returns>Absolute path to the written file.</returns>
        </member>
        <member name="M:RAGENativeUI.Common.WriteFileFromResources(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Save an embedded resource to a concrete path.
            </summary>
            <param name="yourAssembly">Your executing assembly.</param>
            <param name="fullResourceName">Resource name including your solution name. E.G MyMenuMod.banner.png</param>
            <param name="savePath">Path to where save the file, including the filename.</param>
            <returns>Absolute path to the written file.</returns>
        </member>
        <member name="E:RAGENativeUI.Elements.MissionPassedScreen.ContinueHit">
            <summary>
            Occurs when the user presses <see cref="P:RAGENativeUI.Elements.MissionPassedScreen.ContinueControl"/> while this <see cref="T:RAGENativeUI.Elements.MissionPassedScreen"/> is shown.
            </summary>
        </member>
        <member name="P:RAGENativeUI.Elements.MissionPassedScreen.Title">
            <summary>
            Gets or sets the title, the big yellow text.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the text of the title.
            </value>
        </member>
        <member name="P:RAGENativeUI.Elements.MissionPassedScreen.Subtitle">
            <summary>
            Gets or sets the subtitle, the text below the <see cref="P:RAGENativeUI.Elements.MissionPassedScreen.Title"/>.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the text of the subtitle.
            </value>
        </member>
        <member name="P:RAGENativeUI.Elements.MissionPassedScreen.CompletionPercentage">
            <summary>
            Gets or sets the value that will be displayed as the completion percentage.
            </summary>
            <value>
            A <see cref="T:System.Int32"/> representing the completion percentage.
            </value>
        </member>
        <member name="P:RAGENativeUI.Elements.MissionPassedScreen.Medal">
            <summary>
            Gets or sets the medal displayed next to the completion percentage.
            </summary>
            <value>
            A <see cref="T:RAGENativeUI.Elements.MissionPassedScreen.MedalType"/> representing the medal displayed next to the completion percentage.
            </value>
        </member>
        <member name="P:RAGENativeUI.Elements.MissionPassedScreen.Items">
            <summary>
            Gets the <see cref="T:RAGENativeUI.Elements.MissionPassedScreenItem"/>s contained on this <see cref="T:RAGENativeUI.Elements.MissionPassedScreen"/>.
            </summary>
            <value>
            A <see cref="T:RAGENativeUI.Elements.MissionPassedScreen.MissionPassedScreenItemsCollection"/> instance.
            </value>
        </member>
        <member name="P:RAGENativeUI.Elements.MissionPassedScreen.InstructionalButtons">
            <summary>
            Gets the instructional buttons displayed when this <see cref="T:RAGENativeUI.Elements.MissionPassedScreen"/> is visible.
            </summary>
            <value>
            A <see cref="T:RAGENativeUI.Elements.InstructionalButtons"/> instance.
            </value>
        </member>
        <member name="P:RAGENativeUI.Elements.MissionPassedScreen.ContinueControl">
            <summary>
            Gets or sets the game control that must be pressed to exit this <see cref="T:RAGENativeUI.Elements.MissionPassedScreen"/>. By default <see cref="F:Rage.GameControl.FrontendAccept"/>.
            </summary>
            <value>
            A <see cref="T:Rage.GameControl"/>.
            </value>
        </member>
        <member name="M:RAGENativeUI.Elements.MissionPassedScreen.#ctor(System.String,System.String,System.Int32,RAGENativeUI.Elements.MissionPassedScreen.MedalType)">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.Elements.MissionPassedScreen"/> class.
            </summary>
            <param name="title">The title, the big yellow text.</param>
            <param name="subtitle">The subtitle, the text below the <see cref="P:RAGENativeUI.Elements.MissionPassedScreen.Title"/>.</param>
            <param name="completionPercentage">The value that will be displayed as the completion percentage.</param>
            <param name="medal">The medal type displayed next to the completion percentage.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.MissionPassedScreen.#ctor(System.String,System.Int32,RAGENativeUI.Elements.MissionPassedScreen.MedalType)">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.Elements.MissionPassedScreen"/> class with the <see cref="P:RAGENativeUI.Elements.MissionPassedScreen.Title"/> set to "mission passed".
            </summary>
            <param name="subtitle">The subtitle, the text below the <see cref="P:RAGENativeUI.Elements.MissionPassedScreen.Title"/>.</param>
            <param name="completionPercentage">The value that will be displayed as the completion percentage.</param>
            <param name="medal">The medal type displayed next to the completion percentage.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.MissionPassedScreen.Show">
            <summary>
            Shows this <see cref="T:RAGENativeUI.Elements.MissionPassedScreen"/>. It will be visible until the user presses <see cref="P:RAGENativeUI.Elements.MissionPassedScreen.ContinueControl"/>, or the returned <see cref="T:Rage.GameFiber"/> is aborted.
            </summary>
            <returns>The <see cref="T:Rage.GameFiber"/> in which this <see cref="T:RAGENativeUI.Elements.MissionPassedScreen"/> is drawn.</returns>
        </member>
        <member name="M:RAGENativeUI.Elements.MissionPassedScreen.OnContinueHit">
            <summary>
            Called when this <see cref="T:RAGENativeUI.Elements.MissionPassedScreen"/> is shown and the user presses <see cref="P:RAGENativeUI.Elements.MissionPassedScreen.ContinueControl"/>.
            </summary>
        </member>
        <member name="P:RAGENativeUI.Elements.MissionPassedScreenItem.Label">
            <summary>
            Gets or sets the label, the text displayed at the left of this <see cref="T:RAGENativeUI.Elements.MissionPassedScreenItem"/>.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the text displayed at the left of this <see cref="T:RAGENativeUI.Elements.MissionPassedScreenItem"/>.
            </value>
        </member>
        <member name="P:RAGENativeUI.Elements.MissionPassedScreenItem.Status">
            <summary>
            Gets or sets the status, the text displayed at the right of this <see cref="T:RAGENativeUI.Elements.MissionPassedScreenItem"/>.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the text displayed at the right of this <see cref="T:RAGENativeUI.Elements.MissionPassedScreenItem"/>.
            </value>
        </member>
        <member name="P:RAGENativeUI.Elements.MissionPassedScreenItem.Tickbox">
            <summary>
            Gets or sets how the tickbox at the right of this <see cref="T:RAGENativeUI.Elements.MissionPassedScreenItem"/> is displayed.
            </summary>
            <value>
            A <see cref="T:RAGENativeUI.Elements.MissionPassedScreenItem.TickboxState"/> representing how the tickbox at the right of this <see cref="T:RAGENativeUI.Elements.MissionPassedScreenItem"/> is displayed.
            </value>
        </member>
        <member name="M:RAGENativeUI.Elements.MissionPassedScreenItem.#ctor(System.String,System.String,RAGENativeUI.Elements.MissionPassedScreenItem.TickboxState)">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.Elements.MissionPassedScreenItem"/> class.
            </summary>
            <param name="label">The label, the text displayed at the left of this item.</param>
            <param name="status">The status, the text displayed at the right of this item.</param>
            <param name="tickbox">The <see cref="T:RAGENativeUI.Elements.MissionPassedScreenItem.TickboxState"/> representing how the tickbox at the right of this <see cref="T:RAGENativeUI.Elements.MissionPassedScreenItem"/> is displayed.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.MissionPassedScreenItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.Elements.MissionPassedScreenItem"/> class with <see cref="P:RAGENativeUI.Elements.MissionPassedScreenItem.Tickbox"/> set to <see cref="F:RAGENativeUI.Elements.MissionPassedScreenItem.TickboxState.None"/>.
            </summary>
            <param name="label">The label, the text displayed at the left of this item.</param>
            <param name="status">The status, the text displayed at the right of this item.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.MissionPassedScreenItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.Elements.MissionPassedScreenItem"/> class with <see cref="P:RAGENativeUI.Elements.MissionPassedScreenItem.Tickbox"/> set to <see cref="F:RAGENativeUI.Elements.MissionPassedScreenItem.TickboxState.None"/> and <see cref="P:RAGENativeUI.Elements.MissionPassedScreenItem.Status"/> set to an empty <see cref="T:System.String"/>.
            </summary>
            <param name="label">The label, the text displayed at the left of this item.</param>
        </member>
        <member name="P:RAGENativeUI.Elements.BarTimerBar.Percentage">
            <summary>
            Bar percentage. Goes from 0 to 1.
            </summary>
        </member>
        <member name="P:RAGENativeUI.Elements.InstructionalButton.Text">
            <summary>
            Gets or sets the text displayed next to the button.
            <para>
            If this <see cref="T:RAGENativeUI.Elements.InstructionalButton"/> is contained in a <see cref="T:RAGENativeUI.Elements.InstructionalButtons"/> scaleform, 
            <see cref="M:RAGENativeUI.Elements.InstructionalButtons.Update"/> needs to be called to reflect the changes made.
            </para>
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the text displayed next to the button.
            </value>
        </member>
        <member name="P:RAGENativeUI.Elements.InstructionalButton.ButtonText">
            <summary>
            Gets or sets the text displayed inside the button, mainly for displaying custom keyboard bindings, like "I", or "O", or "F5".
            <para>
            If <c>null</c>, <see cref="P:RAGENativeUI.Elements.InstructionalButton.ButtonControl"/> is used instead.
            </para>
            <para>
            If this <see cref="T:RAGENativeUI.Elements.InstructionalButton"/> is contained in a <see cref="T:RAGENativeUI.Elements.InstructionalButtons"/> scaleform, 
            <see cref="M:RAGENativeUI.Elements.InstructionalButtons.Update"/> needs to be called to reflect the changes made.
            </para>
            </summary>
            <value>
            A <see cref="T:System.String"/> representing the text displayed inside the button.
            </value>
        </member>
        <member name="P:RAGENativeUI.Elements.InstructionalButton.ButtonControl">
            <summary>
            Gets or sets the <see cref="T:Rage.GameControl"/> displayed inside the button, it changes depending on keybinds and whether the user is using the controller or the keyboard and mouse.
            <para>
            If <c>null</c> and <see cref="P:RAGENativeUI.Elements.InstructionalButton.ButtonText"/> is also <c>null</c> an empty button is displayed.
            </para>
            <para>
            If this <see cref="T:RAGENativeUI.Elements.InstructionalButton"/> is contained in a <see cref="T:RAGENativeUI.Elements.InstructionalButtons"/> scaleform, 
            <see cref="M:RAGENativeUI.Elements.InstructionalButtons.Update"/> needs to be called to reflect the changes made.
            </para>
            </summary>
            <value>
            A <see cref="T:Rage.GameControl"/> representing the binding displayed inside the button.
            </value>
        </member>
        <member name="P:RAGENativeUI.Elements.InstructionalButton.CanBeDisplayed">
            <summary>
            Gets or sets the <see cref="T:System.Predicate`1"/> delegate that defines the conditions for this <see cref="T:RAGENativeUI.Elements.InstructionalButton"/> to be visible.
            <para>
            If this <see cref="T:RAGENativeUI.Elements.InstructionalButton"/> is contained in a <see cref="T:RAGENativeUI.Elements.InstructionalButtons"/> scaleform, 
            this predicate is only evaluated when <see cref="M:RAGENativeUI.Elements.InstructionalButtons.Update"/> is called.
            </para>
            </summary>
            <value>
            A <see cref="T:System.Predicate`1"/> delegate that defines the conditions for this <see cref="T:RAGENativeUI.Elements.InstructionalButton"/> to be visible.
            </value>
        </member>
        <member name="M:RAGENativeUI.Elements.InstructionalButton.#ctor(Rage.GameControl,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.Elements.InstructionalButton"/> class.
            </summary>
            <param name="control">The <see cref="T:Rage.GameControl"/> displayed inside the button, it changes depending on keybinds and whether the user is using the controller or the keyboard and mouse.</param>
            <param name="text">The text displayed next to the button.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.InstructionalButton.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.Elements.InstructionalButton"/> class.
            </summary>
            <param name="buttonText">The text displayed inside the button, mainly for displaying custom keyboard bindings, like "I", or "O", or "F5".</param>
            <param name="text">The text displayed next to the button.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.InstructionalButton.BindToItem(RAGENativeUI.Elements.UIMenuItem)">
            <summary>
            Bind this button to an item, so it's only shown when that item is selected.
            </summary>
            <param name="item">Item to bind to.</param>
        </member>
        <member name="T:RAGENativeUI.Elements.UIMenuSwitchMenusItem">
            <summary>
            List item that holds an <see cref="T:RAGENativeUI.UIMenu"/> list and allows to easily switch between those menus.
            </summary>
            <remarks>
            All the <see cref="T:RAGENativeUI.UIMenu"/>s must have the same instance of this <see cref="T:RAGENativeUI.Elements.UIMenuSwitchMenusItem"/> and
            is recommended to use the property <see cref="P:RAGENativeUI.Elements.UIMenuSwitchMenusItem.CurrentMenu"/> to make the menu visible without issues.
            </remarks>
        </member>
        <member name="P:RAGENativeUI.Elements.UIMenuSwitchMenusItem.CurrentMenu">
            <summary>
            The currently selected menu. Use this to make the proper menu visible when using this item.
            </summary>
        </member>
        <member name="P:RAGENativeUI.Elements.UIMenuSwitchMenusItem.Index">
            <summary>
            Returns the current selected index.
            </summary>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuSwitchMenusItem.#ctor(System.String,System.Collections.Generic.List{RAGENativeUI.UIMenu},System.Int32)">
            <summary>
            List item, with left/right arrows that switches the current menu depending on the current <see cref="T:RAGENativeUI.UIMenu"/> item.
            Uses the menus titles as the names in the list.
            </summary>
            <param name="text">Item label.</param>
            <param name="menus">List that contains your <see cref="T:RAGENativeUI.UIMenu"/>s.</param>
            <param name="index">Index in the list. If unsure user 0.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuSwitchMenusItem.#ctor(System.String,System.Collections.Generic.List{RAGENativeUI.UIMenu},System.Int32,System.String)">
            <summary>
            List item, with left/right arrows that switches the current menu depending on the current <see cref="T:RAGENativeUI.UIMenu"/> item.
            Uses the menus titles as the names in the list.
            </summary>
            <param name="text">Item label.</param>
            <param name="menus">List that contains your <see cref="T:RAGENativeUI.UIMenu"/>s.</param>
            <param name="index">Index in the list. If unsure user 0.</param>
            <param name="description">Description for this item.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuSwitchMenusItem.#ctor(System.String,System.Collections.Generic.List{RAGENativeUI.UIMenu},System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            List item, with left/right arrows that switches the current menu depending on the current <see cref="T:RAGENativeUI.UIMenu"/> item.
            The menus list and the menus names list must have the same items count.
            </summary>
            <param name="text">Item label.</param>
            <param name="menus">List that contains your <see cref="T:RAGENativeUI.UIMenu"/>s.</param>
            <param name="menusNames">List that contains a name for each <see cref="T:RAGENativeUI.UIMenu"/> in the same order</param>
            <param name="index">Index in the list. If unsure user 0.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuSwitchMenusItem.#ctor(System.String,System.Collections.Generic.List{RAGENativeUI.UIMenu},System.Collections.Generic.List{System.String},System.Int32,System.String)">
            <summary>
            List item, with left/right arrows that switches the current menu depending on the current <see cref="T:RAGENativeUI.UIMenu"/> item.
            The menus list and the menus names list must have the same items count.
            </summary>
            <param name="text">Item label.</param>
            <param name="menus">List that contains your <see cref="T:RAGENativeUI.UIMenu"/>s.</param>
            <param name="menusNames">List that contains a name for each <see cref="T:RAGENativeUI.UIMenu"/> in the same order</param>
            <param name="index">Index in the list. If unsure user 0.</param>
            <param name="description">Description for this item.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuSwitchMenusItem.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{RAGENativeUI.IDisplayItem})">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.Elements.UIMenuSwitchMenusItem"/> class a list menu item, with left/right arrows that switches the current menu depending on the current <see cref="T:RAGENativeUI.UIMenu"/> item,
            from a collection of <see cref="T:RAGENativeUI.IDisplayItem"/>s.
            <para>
            All <see cref="P:RAGENativeUI.IDisplayItem.Value"/>s need to be <see cref="T:RAGENativeUI.UIMenu"/>s.
            </para>
            </summary>
            <param name="text">The item label.</param>
            <param name="description">The description for this item.</param>
            <param name="menusDisplayItems">The collection of <see cref="T:RAGENativeUI.IDisplayItem"/>s with <see cref="T:RAGENativeUI.UIMenu"/>s as <see cref="P:RAGENativeUI.IDisplayItem.Value"/>s.</param>
            <exception cref="T:System.ArgumentException">Thrown if any <see cref="P:RAGENativeUI.IDisplayItem.Value"/> isn't a <see cref="T:RAGENativeUI.UIMenu"/></exception>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuSwitchMenusItem.#ctor(System.String,System.String,RAGENativeUI.IDisplayItem[])">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.Elements.UIMenuSwitchMenusItem"/> class a list menu item, with left/right arrows that switches the current menu depending on the current <see cref="T:RAGENativeUI.UIMenu"/> item,
            from a collection of <see cref="T:RAGENativeUI.IDisplayItem"/>s.
            <para>
            All <see cref="P:RAGENativeUI.IDisplayItem.Value"/>s need to be <see cref="T:RAGENativeUI.UIMenu"/>s.
            </para>
            </summary>
            <param name="text">The item label.</param>
            <param name="description">The description for this item.</param>
            <param name="menusDisplayItems">The collection of <see cref="T:RAGENativeUI.IDisplayItem"/>s with <see cref="T:RAGENativeUI.UIMenu"/>s as <see cref="P:RAGENativeUI.IDisplayItem.Value"/>s.</param>
            <exception cref="T:System.ArgumentException">Thrown if any <see cref="P:RAGENativeUI.IDisplayItem.Value"/> isn't a <see cref="T:RAGENativeUI.UIMenu"/></exception>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuSwitchMenusItem.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{RAGENativeUI.UIMenu})">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.Elements.UIMenuSwitchMenusItem"/> class a list menu item, with left/right arrows that switches the current menu depending on the current <see cref="T:RAGENativeUI.UIMenu"/> item,
            from a collection of <see cref="T:RAGENativeUI.UIMenu"/>s using the default implementation of <see cref="T:RAGENativeUI.IDisplayItem"/>, <see cref="T:RAGENativeUI.DisplayItem"/>, and the <see cref="T:RAGENativeUI.UIMenu"/>'s title caption as display text.
            </summary>
            <param name="text">The item label.</param>
            <param name="description">The description for this item.</param>
            <param name="menus">The collection of <see cref="T:RAGENativeUI.UIMenu"/>s.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuSwitchMenusItem.#ctor(System.String,System.String,RAGENativeUI.UIMenu[])">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.Elements.UIMenuSwitchMenusItem"/> class a list menu item, with left/right arrows that switches the current menu depending on the current <see cref="T:RAGENativeUI.UIMenu"/> item,
            from a collection of <see cref="T:RAGENativeUI.UIMenu"/>s using the default implementation of <see cref="T:RAGENativeUI.IDisplayItem"/>, <see cref="T:RAGENativeUI.DisplayItem"/>, and the <see cref="T:RAGENativeUI.UIMenu"/>'s title caption as display text.
            </summary>
            <param name="text">The item label.</param>
            <param name="description">The description for this item.</param>
            <param name="menus">The collection of <see cref="T:RAGENativeUI.UIMenu"/>s.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuSwitchMenusItem.MenuToIndex(RAGENativeUI.UIMenu)">
            <summary>
            Find a menu in the list and return it's index.
            </summary>
            <param name="menu">Menu to search for.</param>
            <returns>Item index.</returns>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuSwitchMenusItem.IndexToMenu(System.Int32)">
            <summary>
            Find a menu by it's index and return the menu.
            </summary>
            <param name="index">Menu's index.</param>
            <returns>Menu</returns>
        </member>
        <member name="M:RAGENativeUI.Elements.Sprite.#ctor(System.String,System.String,System.Drawing.Point,System.Drawing.Size,System.Single,System.Drawing.Color)">
            <summary>
            Creates a game sprite object from a texture dictionary and texture name.
            </summary>
            <param name="textureDict"></param>
            <param name="textureName"></param>
            <param name="position"></param>
            <param name="size"></param>
            <param name="heading"></param>
            <param name="color"></param>
        </member>
        <member name="M:RAGENativeUI.Elements.Sprite.#ctor(System.String,System.String,System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Creates a game sprite object from a texture dictionary and texture name.
            </summary>
            <param name="textureDict"></param>
            <param name="textureName"></param>
            <param name="position"></param>
            <param name="size"></param>
        </member>
        <member name="M:RAGENativeUI.Elements.Sprite.Draw">
            <summary>
            Draws the sprite on a 1080-pixels height base.
            </summary>
        </member>
        <member name="M:RAGENativeUI.Elements.Sprite.DrawTexture(Rage.Texture,System.Drawing.Point,System.Drawing.Size,Rage.GraphicsEventArgs)">
            <summary>
            Draw a custom texture from a file on a 1080-pixels height base.
            </summary>
            <param name="texture">Your custom texture object.</param>
            <param name="position"></param>
            <param name="size"></param>
        </member>
        <member name="M:RAGENativeUI.Elements.Sprite.DrawTexture(Rage.Texture,System.Drawing.Point,System.Drawing.Size,Rage.Graphics)">
            <summary>
            Draws a custom texture from a file on a 1080-pixels height base.
            </summary>
            <param name="texture">Your custom texture object.</param>
            <param name="position"></param>
            <param name="size"></param>
            <param name="graphics"></param>
        </member>
        <member name="M:RAGENativeUI.Elements.Sprite.WriteFileFromResources(System.Reflection.Assembly,System.String)">
            <summary>
            Save an embedded resource to a temporary file.
            </summary>
            <param name="yourAssembly">Your executing assembly.</param>
            <param name="fullResourceName">Resource name including your solution name. E.G MyMenuMod.banner.png</param>
            <returns>Absolute path to the written file.</returns>
        </member>
        <member name="M:RAGENativeUI.Elements.Sprite.WriteFileFromResources(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Save an embedded resource to a concrete path.
            </summary>
            <param name="yourAssembly">Your executing assembly.</param>
            <param name="fullResourceName">Resource name including your solution name. E.G MyMenuMod.banner.png</param>
            <param name="savePath">Path to where save the file, including the filename.</param>
            <returns>Absolute path to the written file.</returns>
        </member>
        <member name="E:RAGENativeUI.Elements.UIMenuCheckboxItem.CheckboxEvent">
            <summary>
            Triggered when the checkbox state is changed.
            </summary>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuCheckboxItem.#ctor(System.String,System.Boolean)">
            <summary>
            Checkbox item with a toggleable checkbox.
            </summary>
            <param name="text">Item label.</param>
            <param name="check">Boolean value whether the checkbox is checked.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuCheckboxItem.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Checkbox item with a toggleable checkbox.
            </summary>
            <param name="text">Item label.</param>
            <param name="check">Boolean value whether the checkbox is checked.</param>
            <param name="description">Description for this item.</param>
        </member>
        <member name="P:RAGENativeUI.Elements.UIMenuCheckboxItem.Checked">
            <summary>
            Change or get whether the checkbox is checked.
            </summary>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuCheckboxItem.Position(System.Int32)">
            <summary>
            Set item's position.
            </summary>
            <param name="y"></param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuCheckboxItem.SetVerticalPosition(System.Int32)">
            <summary>
            Set item's vertical position.
            </summary>
            <param name="y"></param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuCheckboxItem.Draw">
            <summary>
            Draw item.
            </summary>
        </member>
        <member name="T:RAGENativeUI.Elements.UIMenuItem">
            <summary>
            Simple item with a label.
            </summary>
        </member>
        <member name="E:RAGENativeUI.Elements.UIMenuItem.Activated">
            <summary>
            Called when user selects the current item.
            </summary>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuItem.#ctor(System.String)">
            <summary>
            Basic menu button.
            </summary>
            <param name="text">Button label.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuItem.#ctor(System.String,System.String)">
            <summary>
            Basic menu button.
            </summary>
            <param name="text">Button label.</param>
            <param name="description">Description.</param>
        </member>
        <member name="P:RAGENativeUI.Elements.UIMenuItem.Selected">
            <summary>
            Whether this item is currently selected.
            </summary>
        </member>
        <member name="P:RAGENativeUI.Elements.UIMenuItem.Hovered">
            <summary>
            Whether this item is currently being hovered on with a mouse.
            </summary>
        </member>
        <member name="P:RAGENativeUI.Elements.UIMenuItem.Description">
            <summary>
            This item's description.
            </summary>
        </member>
        <member name="P:RAGENativeUI.Elements.UIMenuItem.Enabled">
            <summary>
            Whether this item is enabled or disabled (text is greyed out and you cannot select it).
            </summary>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuItem.Position(System.Int32)">
            <summary>
            Set item's position.
            </summary>
            <param name="y"></param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuItem.SetVerticalPosition(System.Int32)">
            <summary>
            Set item's vertical position.
            </summary>
            <param name="y"></param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuItem.Draw">
            <summary>
            Draw this item.
            </summary>
        </member>
        <member name="P:RAGENativeUI.Elements.UIMenuItem.Offset">
            <summary>
            This item's offset.
            </summary>
        </member>
        <member name="P:RAGENativeUI.Elements.UIMenuItem.Text">
            <summary>
            Returns this item's label.
            </summary>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuItem.SetLeftBadge(RAGENativeUI.Elements.UIMenuItem.BadgeStyle)">
            <summary>
            Set the left badge. Set it to None to remove the badge.
            </summary>
            <param name="badge"></param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuItem.SetRightBadge(RAGENativeUI.Elements.UIMenuItem.BadgeStyle)">
            <summary>
            Set the right badge. Set it to None to remove the badge.
            </summary>
            <param name="badge"></param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuItem.SetRightLabel(System.String)">
            <summary>
            Set the right label.
            </summary>
            <param name="text">Text as label. Set it to "" to remove the label.</param>
        </member>
        <member name="P:RAGENativeUI.Elements.UIMenuItem.RightLabel">
            <summary>
            Returns the current right label.
            </summary>
        </member>
        <member name="P:RAGENativeUI.Elements.UIMenuItem.LeftBadge">
            <summary>
            Returns the current left badge.
            </summary>
        </member>
        <member name="P:RAGENativeUI.Elements.UIMenuItem.RightBadge">
            <summary>
            Returns the current right badge.
            </summary>
        </member>
        <member name="P:RAGENativeUI.Elements.UIMenuItem.Parent">
            <summary>
            Returns the menu this item is in.
            </summary>
        </member>
        <member name="T:RAGENativeUI.Elements.UIMenuListItem">
            <summary>
             A list item, with left/right arrows.
            </summary>
            <seealso cref="T:RAGENativeUI.Elements.UIMenuItem" />
        </member>
        <member name="P:RAGENativeUI.Elements.UIMenuListItem.Items">
            <summary>
            Gets or sets the items from this <see cref="T:RAGENativeUI.Elements.UIMenuListItem"/> instance.
            </summary>
            <remarks>
            For better safety before modifying the items <see cref="T:System.Collections.Generic.List`1"/> set <see cref="P:RAGENativeUI.Elements.UIMenuListItem.Index"/> to 0.
            </remarks>
        </member>
        <member name="P:RAGENativeUI.Elements.UIMenuListItem.Collection">
            <summary>
            Gets the collection of items of this <see cref="T:RAGENativeUI.Elements.UIMenuListItem"/>.
            </summary>
            <value>
            The <see cref="T:RAGENativeUI.DisplayItemsCollection"/> of this <see cref="T:RAGENativeUI.Elements.UIMenuListItem"/>.
            </value>
        </member>
        <member name="P:RAGENativeUI.Elements.UIMenuListItem.SelectedItem">
            <summary>
            Gets the current selection.
            </summary>
            <value>
            The current selection's <see cref="T:RAGENativeUI.IDisplayItem"/>.
            </value>
        </member>
        <member name="P:RAGENativeUI.Elements.UIMenuListItem.SelectedValue">
            <summary>
            Gets the current selection value.
            </summary>
            <value>
            The current selection's <see cref="P:RAGENativeUI.IDisplayItem.Value"/>.
            </value>
        </member>
        <member name="F:RAGENativeUI.Elements.UIMenuListItem.ScrollingEnabled">
            <summary>
            Enables or disables scrolling through the list by holding the key
            </summary>
        </member>
        <member name="F:RAGENativeUI.Elements.UIMenuListItem.HoldTimeBeforeScroll">
            <summary>
            Hold time in milliseconds before scrolling to the next item on list when holding the key [Default = 200]
            </summary>
        </member>
        <member name="E:RAGENativeUI.Elements.UIMenuListItem.OnListChanged">
            <summary>
            Triggered when the list is changed.
            </summary>
        </member>
        <member name="P:RAGENativeUI.Elements.UIMenuListItem.Index">
            <summary>
            Returns the current selected index or -1 if the collection is empty.
            </summary>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuListItem.#ctor(System.String,System.Collections.Generic.List{System.Object},System.Int32)">
            <summary>
            List item, with left/right arrows.
            </summary>
            <param name="text">Item label.</param>
            <param name="items">List that contains your items.</param>
            <param name="index">Index in the list. If unsure user 0.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuListItem.#ctor(System.String,System.Collections.Generic.List{System.Object},System.Int32,System.String)">
            <summary>
            List item, with left/right arrows.
            </summary>
            <param name="text">Item label.</param>
            <param name="items">List that contains your items.</param>
            <param name="index">Index in the list. If unsure user 0.</param>
            <param name="description">Description for this item.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuListItem.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{RAGENativeUI.IDisplayItem})">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.Elements.UIMenuListItem"/> class, from a collection of <see cref="T:RAGENativeUI.IDisplayItem"/>s.
            </summary>
            <param name="text">The <see cref="T:RAGENativeUI.Elements.UIMenuListItem"/>'s label.</param>
            <param name="description">The <see cref="T:RAGENativeUI.Elements.UIMenuListItem"/>'s description.</param>
            <param name="items">The collection of <see cref="T:RAGENativeUI.IDisplayItem"/>s.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuListItem.#ctor(System.String,System.String,RAGENativeUI.IDisplayItem[])">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.Elements.UIMenuListItem"/> class, from a collection of <see cref="T:RAGENativeUI.IDisplayItem"/>s.
            </summary>
            <param name="text">The <see cref="T:RAGENativeUI.Elements.UIMenuListItem"/>'s label.</param>
            <param name="description">The <see cref="T:RAGENativeUI.Elements.UIMenuListItem"/>'s description.</param>
            <param name="items">The collection of <see cref="T:RAGENativeUI.IDisplayItem"/>s.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuListItem.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.Elements.UIMenuListItem"/> class, from a collection of <see cref="T:System.Object"/>s using the default implementation of <see cref="T:RAGENativeUI.IDisplayItem"/>, <see cref="T:RAGENativeUI.DisplayItem"/>.
            </summary>
            <param name="text">The <see cref="T:RAGENativeUI.Elements.UIMenuListItem"/>'s label.</param>
            <param name="description">The <see cref="T:RAGENativeUI.Elements.UIMenuListItem"/>'s description.</param>
            <param name="itemsValues">The collection of <see cref="T:System.Object"/>s.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuListItem.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.Elements.UIMenuListItem"/> class, from a collection of <see cref="T:System.Object"/>s using the default implementation of <see cref="T:RAGENativeUI.IDisplayItem"/>, <see cref="T:RAGENativeUI.DisplayItem"/>.
            </summary>
            <param name="text">The <see cref="T:RAGENativeUI.Elements.UIMenuListItem"/>'s label.</param>
            <param name="description">The <see cref="T:RAGENativeUI.Elements.UIMenuListItem"/>'s description.</param>
            <param name="itemsValues">The collection of <see cref="T:System.Object"/>s.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuListItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.Elements.UIMenuListItem"/> class with an empty <see cref="P:RAGENativeUI.Elements.UIMenuListItem.Collection"/>.
            </summary>
            <param name="text">The <see cref="T:RAGENativeUI.Elements.UIMenuListItem"/>'s label.</param>
            <param name="description">The <see cref="T:RAGENativeUI.Elements.UIMenuListItem"/>'s description.</param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuListItem.Position(System.Int32)">
            <summary>
            Set item's position.
            </summary>
            <param name="y"></param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuListItem.SetVerticalPosition(System.Int32)">
            <summary>
            Set item's vertical position.
            </summary>
            <param name="y"></param>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuListItem.ItemToIndex(System.Object)">
            <summary>
            Find an item in the list and return it's index.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Item index.</returns>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuListItem.IndexToItem(System.Int32)">
            <summary>
            Find an item by it's index and return the item.
            </summary>
            <param name="index">Item's index.</param>
            <returns>Item</returns>
        </member>
        <member name="M:RAGENativeUI.Elements.UIMenuListItem.Draw">
            <summary>
            Draw item.
            </summary>
        </member>
        <member name="T:RAGENativeUI.Elements.ResRectangle">
            <summary>
            A rectangle in 1080 pixels height system.
            </summary>
        </member>
        <member name="T:RAGENativeUI.Elements.ResText">
            <summary>
            A Text object in the 1080 pixels height base system.
            </summary>
        </member>
        <member name="M:RAGENativeUI.Elements.ResText.AddLongString(System.String)">
            <summary>
            Push a long string into the stack.
            </summary>
            <param name="str"></param>
        </member>
        <member name="T:RAGENativeUI.IDisplayItem">
            <summary>
            Represents an object with a value and the text that represents the value.
            </summary>
            <seealso cref="T:System.IEquatable`1"/>
            <seealso cref="T:RAGENativeUI.DisplayItem"/>
        </member>
        <member name="P:RAGENativeUI.IDisplayItem.Value">
            <summary>
            Gets the value of this <see cref="T:RAGENativeUI.IDisplayItem"/>.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:RAGENativeUI.IDisplayItem.DisplayText">
            <summary>
            Gets the display text of this <see cref="T:RAGENativeUI.IDisplayItem"/>.
            </summary>
            <value>
            The display text.
            </value>
        </member>
        <member name="T:RAGENativeUI.DisplayItem">
            <summary>
            Default implementation of <see cref="T:RAGENativeUI.IDisplayItem"/>
            </summary>
            <seealso cref="T:RAGENativeUI.IDisplayItem" />
        </member>
        <member name="P:RAGENativeUI.DisplayItem.NullValueDisplayText">
            <summary>
            Gets or sets the <see cref="T:System.String"/> that <see cref="P:RAGENativeUI.DisplayItem.DisplayText"/> would return if <see cref="P:RAGENativeUI.DisplayItem.Value"/> is null.
            </summary>
            <value>
            The null value display text.
            </value>
        </member>
        <member name="P:RAGENativeUI.DisplayItem.Value">
            <summary>
            Gets the value of this <see cref="T:RAGENativeUI.DisplayItem"/>.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:RAGENativeUI.DisplayItem.DisplayText">
            <summary>
            Gets the display text of this <see cref="T:RAGENativeUI.DisplayItem"/>.
            <para>
            If no display text was specified in the constructor, this will return <see cref="P:RAGENativeUI.DisplayItem.Value"/>'s <see cref="M:System.Object.ToString"/>.
            </para>
            <para>
            If <see cref="P:RAGENativeUI.DisplayItem.Value"/> is null and no display text was specified, this will return <see cref="P:RAGENativeUI.DisplayItem.NullValueDisplayText"/>.
            </para>
            </summary>
            <value>
            The display text.
            </value>
        </member>
        <member name="M:RAGENativeUI.DisplayItem.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.DisplayItem"/> struct with the specified value and display text.
            </summary>
            <param name="value">The value.</param>
            <param name="displayText">The display text.</param>
        </member>
        <member name="M:RAGENativeUI.DisplayItem.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.DisplayItem"/> struct with the specified value and its <see cref="M:System.Object.ToString"/> implementation as the display text.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RAGENativeUI.DisplayItem.Equals(RAGENativeUI.IDisplayItem)">
            <summary>
            Indicates whether the current <see cref="T:RAGENativeUI.DisplayItem"/>'s <see cref="P:RAGENativeUI.DisplayItem.Value"/> equals the other <see cref="T:RAGENativeUI.IDisplayItem"/>'s <see cref="P:RAGENativeUI.IDisplayItem.Value"/>.
            </summary>
            <param name="other">An <see cref="T:RAGENativeUI.IDisplayItem"/> to compare with this <see cref="T:RAGENativeUI.DisplayItem"/>.</param>
            <returns>
            <c>true</c> if the current <see cref="T:RAGENativeUI.DisplayItem"/> has the same <see cref="P:RAGENativeUI.DisplayItem.Value"/> object as the <paramref name="other"/> <see cref="T:RAGENativeUI.IDisplayItem"/> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RAGENativeUI.DisplayItem.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:RAGENativeUI.DisplayItemsCollection">
            <summary>
            Represents a collection of <see cref="T:RAGENativeUI.IDisplayItem"/>.
            </summary>
            <seealso cref="T:RAGENativeUI.BaseCollection`1" />
        </member>
        <member name="M:RAGENativeUI.DisplayItemsCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.DisplayItemsCollection"/> class that is empty.
            </summary>
        </member>
        <member name="M:RAGENativeUI.DisplayItemsCollection.#ctor(System.Collections.Generic.IEnumerable{RAGENativeUI.IDisplayItem})">
            <summary>
            Initializes a new instance of the <see cref="T:RAGENativeUI.DisplayItemsCollection"/> class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:RAGENativeUI.DisplayItemsCollection.Add(System.Object,System.String)">
            <summary>
            Adds the specified value and display text using the default implementation of <see cref="T:RAGENativeUI.IDisplayItem"/>, <see cref="T:RAGENativeUI.DisplayItem"/>.
            </summary>
            <param name="value">The value.</param>
            <param name="displayText">The display text.</param>
        </member>
        <member name="M:RAGENativeUI.DisplayItemsCollection.Add(System.Object)">
            <summary>
            Adds the specified value using the default implementation of <see cref="T:RAGENativeUI.IDisplayItem"/>, <see cref="T:RAGENativeUI.DisplayItem"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RAGENativeUI.DisplayItemsCollection.Remove(System.Object)">
            <summary>
            Removes all the occurrences of <see cref="T:RAGENativeUI.IDisplayItem"/>s which <see cref="P:RAGENativeUI.IDisplayItem.Value"/> equals the specified <paramref name="value"/> from this <see cref="T:RAGENativeUI.DisplayItemsCollection"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RAGENativeUI.DisplayItemsCollection.Contains(System.Object)">
            <summary>
            Determines whether this <see cref="T:RAGENativeUI.DisplayItemsCollection"/> contains a <see cref="T:RAGENativeUI.IDisplayItem"/> which <see cref="P:RAGENativeUI.IDisplayItem.Value"/> equals the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            true if a <see cref="T:RAGENativeUI.IDisplayItem"/> which <see cref="P:RAGENativeUI.IDisplayItem.Value"/> equals the specified <paramref name="value"/> is found in this <see cref="T:RAGENativeUI.DisplayItemsCollection"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:RAGENativeUI.DisplayItemsCollection.IndexOf(System.Object)">
            <summary>
            Searches for the <see cref="T:RAGENativeUI.IDisplayItem"/> which <see cref="P:RAGENativeUI.IDisplayItem.Value"/> equals the specified <paramref name="value"/> and returns the zero-based index of the first occurrence within the entire <see cref="T:RAGENativeUI.DisplayItemsCollection"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The zero-based index of the first occurrence of the <see cref="T:RAGENativeUI.IDisplayItem"/> which <see cref="P:RAGENativeUI.IDisplayItem.Value"/> equals the specified <paramref name="value"/> within the entire <see cref="T:RAGENativeUI.DisplayItemsCollection"/>, if found; otherwise, â€“1.</returns>
        </member>
        <member name="T:RAGENativeUI.MenuPool">
            <summary>
            Helper class that handles all of your Menus. After instatiating it, you will have to add your menu by using the Add method.
            </summary>
        </member>
        <member name="M:RAGENativeUI.MenuPool.AddSubMenu(RAGENativeUI.UIMenu,System.String)">
            <summary>
            Create and add a submenu to the menu pool.
            Adds an item with the given text to the menu, creates a corresponding submenu, and binds the submenu to the item.
            The submenu inherits its title from the menu, and its subtitle from the item text.
            </summary>
            <param name="menu">The parent menu to which the submenu must be added.</param>
            <param name="text">The name of the submenu.</param>
            <returns>The newly created submenu.</returns>
        </member>
        <member name="M:RAGENativeUI.MenuPool.RefreshIndex">
            <summary>
            Refresh index of every menu in the pool.
            Use this after you have finished constructing the entire menu pool.
            </summary>
        </member>
        <member name="M:RAGENativeUI.MenuPool.ToList">
            <summary>
            Returns all of your menus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RAGENativeUI.MenuPool.ProcessControl">
            <summary>
            Processes all of your visible menus' controls.
            </summary>
        </member>
        <member name="M:RAGENativeUI.MenuPool.ProcessKey(System.Windows.Forms.Keys)">
            <summary>
            Processes all of your visible menus' keys.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:RAGENativeUI.MenuPool.ProcessMouse">
            <summary>
            Processes all of your visible menus' mouses.
            </summary>
        </member>
        <member name="M:RAGENativeUI.MenuPool.Draw">
            <summary>
            Draws all visible menus.
            </summary>
        </member>
        <member name="M:RAGENativeUI.MenuPool.IsAnyMenuOpen">
            <summary>
            Checks if any menu is currently visible.
            </summary>
            <returns>true if at least one menu is visible, false if not.</returns>
        </member>
        <member name="M:RAGENativeUI.MenuPool.ProcessMenus">
            <summary>
            Process all of your menus' functions. Call this in a tick event.
            </summary>
        </member>
        <member name="M:RAGENativeUI.MenuPool.DrawBanners(Rage.GraphicsEventArgs)">
            <summary>
            Draw all of your menus' custom banners.
            </summary>
            <param name="canvas">Canvas to draw on.</param>
        </member>
        <member name="M:RAGENativeUI.MenuPool.DrawBanners(Rage.Graphics)">
            <summary>
            Draw all of your menus' custom banners.
            </summary>
            <param name="g">The <see cref="T:Rage.Graphics"/> to draw on.</param>
        </member>
        <member name="M:RAGENativeUI.MenuPool.CloseAllMenus">
            <summary>
            Closes all of your menus.
            </summary>
        </member>
        <member name="M:RAGENativeUI.MenuPool.ResetMenus(System.Boolean,System.Boolean)">
            <summary>
            Sets the index of all lists to 0 and unchecks all the checkboxes from your menus. 
            </summary>
            <param name="resetLists">If true the index of all lists will be set to 0.</param>
            <param name="resetCheckboxes">If true all the checkboxes will be unchecked.</param>
        </member>
        <member name="M:RAGENativeUI.PauseMenu.MissionLogo.#ctor(Rage.Texture)">
            <summary>
            Create a logo from an external picture.
            </summary>
            <param name="filepath">Path to the picture</param>
        </member>
        <member name="M:RAGENativeUI.PauseMenu.MissionLogo.#ctor(System.String,System.String)">
            <summary>
            Create a mission logo from a game texture.
            </summary>
            <param name="textureDict">Name of the texture dictionary</param>
            <param name="textureName">Name of the texture.</param>
        </member>
        <member name="M:RAGENativeUI.PauseMenu.TabSubmenuItem.Draw">
            <summary>
            Draws this instance.
            </summary>
        </member>
        <member name="M:RAGENativeUI.StringMeasurer.MeasureString(System.String)">
            <summary>
            Measures width of a 0.35 scale string.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:RAGENativeUI.UIMenu">
            <summary>
            Base class for RAGENativeUI. Calls the next events: OnIndexChange, OnListChanged, OnCheckboxChange, OnItemSelect, OnMenuClose, OnMenuchange.
            </summary>
        </member>
        <member name="E:RAGENativeUI.UIMenu.OnIndexChange">
            <summary>
            Called when user presses up or down, changing current selection.
            </summary>
        </member>
        <member name="E:RAGENativeUI.UIMenu.OnListChange">
            <summary>
            Called when user presses left or right, changing a list position.
            </summary>
        </member>
        <member name="E:RAGENativeUI.UIMenu.OnCheckboxChange">
            <summary>
            Called when user presses enter on a checkbox item.
            </summary>
        </member>
        <member name="E:RAGENativeUI.UIMenu.OnItemSelect">
            <summary>
            Called when user selects a simple item.
            </summary>
        </member>
        <member name="E:RAGENativeUI.UIMenu.OnMenuClose">
            <summary>
            Called when user closes the menu or goes back in a menu chain.
            </summary>
        </member>
        <member name="E:RAGENativeUI.UIMenu.OnMenuChange">
            <summary>
            Called when user either clicks on a binded button or goes back to a parent menu.
            </summary>
        </member>
        <member name="M:RAGENativeUI.UIMenu.#ctor(System.String,System.String)">
            <summary>
            Basic Menu constructor.
            </summary>
            <param name="title">Title that appears on the big banner.</param>
            <param name="subtitle">Subtitle that appears in capital letters in a small black bar.</param>
        </member>
        <member name="M:RAGENativeUI.UIMenu.#ctor(System.String,System.String,System.Drawing.Point)">
            <summary>
            Basic Menu constructor with an offset.
            </summary>
            <param name="title">Title that appears on the big banner.</param>
            <param name="subtitle">Subtitle that appears in capital letters in a small black bar. Set to "" if you dont want a subtitle.</param>
            <param name="offset">Point object with X and Y data for offsets. Applied to all menu elements.</param>
        </member>
        <member name="M:RAGENativeUI.UIMenu.#ctor(System.String,System.String,System.Drawing.Point,Rage.Texture)">
            <summary>
            Initialise a menu with a custom texture banner.
            </summary>
            <param name="title">Title that appears on the big banner. Set to "" if you don't want a title.</param>
            <param name="subtitle">Subtitle that appears in capital letters in a small black bar. Set to "" if you dont want a subtitle.</param>
            <param name="offset">Point object with X and Y data for offsets. Applied to all menu elements.</param>
            <param name="customBanner">Your custom Rage.Texture.</param>
        </member>
        <member name="M:RAGENativeUI.UIMenu.#ctor(System.String,System.String,System.Drawing.Point,System.String,System.String)">
            <summary>
            Advanced Menu constructor that allows custom title banner.
            </summary>
            <param name="title">Title that appears on the big banner. Set to "" if you are using a custom banner.</param>
            <param name="subtitle">Subtitle that appears in capital letters in a small black bar.</param>
            <param name="offset">Point object with X and Y data for offsets. Applied to all menu elements.</param>
            <param name="spriteLibrary">Sprite library name for the banner.</param>
            <param name="spriteName">Sprite name for the banner.</param>
        </member>
        <member name="P:RAGENativeUI.UIMenu.WidthOffset">
            <summary>
            Returns the current width offset.
            </summary>
        </member>
        <member name="M:RAGENativeUI.UIMenu.SetMenuWidthOffset(System.Int32)">
            <summary>
            Change the menu's width. The width is calculated as DefaultWidth + WidthOffset, so a width offset of 10 would enlarge the menu by 10 pixels.
            </summary>
            <param name="widthOffset">New width offset.</param>
        </member>
        <member name="M:RAGENativeUI.UIMenu.DisEnableControls(System.Boolean)">
            <summary>
            Enable or disable all controls but the necessary to operate a menu.
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:RAGENativeUI.UIMenu.DisableInstructionalButtons(System.Boolean)">
            <summary>
            Enable or disable the instructional buttons.
            </summary>
            <param name="disable"></param>
        </member>
        <member name="M:RAGENativeUI.UIMenu.SetBannerType(RAGENativeUI.Elements.Sprite)">
            <summary>
            Set the banner to your own Sprite object.
            </summary>
            <param name="spriteBanner">Sprite object. The position and size does not matter.</param>
        </member>
        <member name="M:RAGENativeUI.UIMenu.SetBannerType(RAGENativeUI.Elements.ResRectangle)">
            <summary>
             Set the banner to your own Rectangle.
            </summary>
            <param name="rectangle">UIResRectangle object. Position and size does not matter.</param>
        </member>
        <member name="M:RAGENativeUI.UIMenu.SetBannerType(Rage.Texture)">
            <summary>
            Set the banner to your own custom texture. Set it to null if you want to restore the banner.
            </summary>
            <param name="texture">Rage.Texture object</param>
        </member>
        <member name="M:RAGENativeUI.UIMenu.AddItem(RAGENativeUI.Elements.UIMenuItem)">
            <summary>
            Add an item to the menu.
            </summary>
            <param name="item">Item object to be added. Can be normal item, checkbox or list item.</param>
        </member>
        <member name="M:RAGENativeUI.UIMenu.AddItem(RAGENativeUI.Elements.UIMenuItem,System.Int32)">
            <summary>
            Add an item to the menu at the specified index.
            </summary>
            <param name="item">Item object to be added. Can be normal item, checkbox or list item.</param>
            <param name="index"></param>
        </member>
        <member name="M:RAGENativeUI.UIMenu.RemoveItemAt(System.Int32)">
            <summary>
            Remove an item at index n.
            </summary>
            <param name="index">Index to remove the item at.</param>
        </member>
        <member name="M:RAGENativeUI.UIMenu.RefreshIndex">
            <summary>
            Reset the current selected item to 0. Use this after you add or remove items dynamically.
            </summary>
        </member>
        <member name="M:RAGENativeUI.UIMenu.Clear">
            <summary>
            Remove all items from the menu.
            </summary>
        </member>
        <member name="M:RAGENativeUI.UIMenu.DrawBanner(Rage.GraphicsEventArgs)">
            <summary>
            Draw your custom banner.
            </summary>
            <param name="e">Rage.GraphicsEventArgs to draw on.</param>
        </member>
        <member name="M:RAGENativeUI.UIMenu.DrawBanner(Rage.Graphics)">
            <summary>
            Draw your custom banner.
            <para>
            To prevent flickering call it inside a <see cref="E:Rage.Game.RawFrameRender"/> event handler.
            </para>
            </summary>
            <param name="g">The <see cref="T:Rage.Graphics"/> to draw on.</param>
        </member>
        <member name="M:RAGENativeUI.UIMenu.Draw">
            <summary>
            Draw the menu and all of it's components.
            </summary>
        </member>
        <member name="M:RAGENativeUI.UIMenu.GetScreenResolutionMantainRatio">
            <summary>
            Returns the 1080pixels-based screen resolution while mantaining current aspect ratio.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RAGENativeUI.UIMenu.IsMouseInBounds(System.Drawing.Point,System.Drawing.Size)">
            <summary>
            Chech whether the mouse is inside the specified rectangle.
            </summary>
            <param name="topLeft">top left point of your rectangle.</param>
            <param name="boxSize">size of your rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:RAGENativeUI.UIMenu.IsMouseInListItemArrows(RAGENativeUI.Elements.UIMenuListItem,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Function to get whether the cursor is in an arrow space, or in label of an MenuListItem.
            </summary>
            <param name="item">What item to check</param>
            <param name="topLeft">top left point of the item.</param>
            <param name="safezone">safezone size.</param>
            <returns>0 - Not in item at all, 1 - In label, 2 - In arrow space.</returns>
        </member>
        <member name="M:RAGENativeUI.UIMenu.GetSafezoneBounds">
            <summary>
            Returns the safezone bounds in pixel, relative to the 1080pixel based system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RAGENativeUI.UIMenu.GoUpOverflow">
            <summary>
            Go up the menu if the number of items is more than maximum items on screen.
            </summary>
        </member>
        <member name="M:RAGENativeUI.UIMenu.GoUp">
            <summary>
            Go up the menu if the number of items is less than or equal to the maximum items on screen.
            </summary>
        </member>
        <member name="M:RAGENativeUI.UIMenu.GoDownOverflow">
            <summary>
            Go down the menu if the number of items is more than maximum items on screen.
            </summary>
        </member>
        <member name="M:RAGENativeUI.UIMenu.GoDown">
            <summary>
            Go up the menu if the number of items is less than or equal to the maximum items on screen.
            </summary>
        </member>
        <member name="M:RAGENativeUI.UIMenu.GoLeft">
            <summary>
            Go left on a MenuListItem.
            </summary>
        </member>
        <member name="M:RAGENativeUI.UIMenu.GoRight">
            <summary>
            Go right on a MenuListItem.
            </summary>
        </member>
        <member name="M:RAGENativeUI.UIMenu.SelectItem">
            <summary>
            Activate the current selected item.
            </summary>
        </member>
        <member name="M:RAGENativeUI.UIMenu.GoBack">
            <summary>
            Close or go back in a menu chain.
            </summary>
        </member>
        <member name="M:RAGENativeUI.UIMenu.BindMenuToItem(RAGENativeUI.UIMenu,RAGENativeUI.Elements.UIMenuItem)">
            <summary>
            Bind a menu to a button. When the button is clicked that menu will open.
            </summary>
        </member>
        <member name="M:RAGENativeUI.UIMenu.ReleaseMenuFromItem(RAGENativeUI.Elements.UIMenuItem)">
            <summary>
            Remove menu binding from button.
            </summary>
            <param name="releaseFrom">Button to release from.</param>
            <returns>Returns true if the operation was successful.</returns>
        </member>
        <member name="M:RAGENativeUI.UIMenu.ProcessMouse">
            <summary>
            Process the mouse's position and check if it's hovering over any Element. Call this in Game.FrameRender or in a loop.
            </summary>
        </member>
        <member name="M:RAGENativeUI.UIMenu.SetKey(RAGENativeUI.Common.MenuControls,System.Windows.Forms.Keys)">
            <summary>
            Set a key to control a menu. Can be multiple keys for each control.
            </summary>
            <param name="control"></param>
            <param name="keyToSet"></param>
        </member>
        <member name="M:RAGENativeUI.UIMenu.SetKey(RAGENativeUI.Common.MenuControls,Rage.GameControl)">
            <summary>
            Set a Rage.GameControl to control a menu. Can be multiple controls. This applies it to all indexes.
            </summary>
            <param name="control"></param>
            <param name="gtaControl"></param>
        </member>
        <member name="M:RAGENativeUI.UIMenu.SetKey(RAGENativeUI.Common.MenuControls,Rage.GameControl,System.Int32)">
            <summary>
            Set a Rage.GameControl to control a menu only on a specific index.
            </summary>
            <param name="control"></param>
            <param name="gtaControl"></param>
            <param name="controlIndex"></param>
        </member>
        <member name="M:RAGENativeUI.UIMenu.ResetKey(RAGENativeUI.Common.MenuControls)">
            <summary>
            Remove all controls on a control.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:RAGENativeUI.UIMenu.HasControlJustBeenPressed(RAGENativeUI.Common.MenuControls,System.Windows.Forms.Keys)">
            <summary>
            Check whether a menucontrol has been pressed.
            </summary>
            <param name="control">Control to check for.</param>
            <param name="key">Key if you're using keys.</param>
            <returns></returns>
        </member>
        <member name="M:RAGENativeUI.UIMenu.HasControlJustBeenReleaseed(RAGENativeUI.Common.MenuControls,System.Windows.Forms.Keys)">
            <summary>
            Check whether a menucontrol has been released.
            </summary>
            <param name="control">Control to check for.</param>
            <param name="key">Key if you're using keys.</param>
            <returns></returns>
        </member>
        <member name="M:RAGENativeUI.UIMenu.IsControlBeingPressed(RAGENativeUI.Common.MenuControls,System.Windows.Forms.Keys)">
            <summary>
            Checks whether a menucontrol is being pressed and if selected item is UIListItem, uses UIListItem variables
            </summary>
            <param name="control"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:RAGENativeUI.UIMenu.ProcessControl(System.Windows.Forms.Keys)">
            <summary>
            Process control-stroke. Call this in the Game.FrameRender event or in a loop.
            </summary>
        </member>
        <member name="M:RAGENativeUI.UIMenu.ProcessKey(System.Windows.Forms.Keys)">
            <summary>
            Process keystroke. Call this in the Game.FrameRender event or in a loop.
            </summary>
        </member>
        <member name="M:RAGENativeUI.UIMenu.FormatDescription(System.String)">
            <summary>
            Formats the input string so it doesn't go out of bounds of the description box.
            </summary>
            <param name="input">String to format.</param>
            <returns></returns>
        </member>
        <member name="M:RAGENativeUI.UIMenu.Reset(System.Boolean,System.Boolean)">
            <summary>
            Sets the index of all lists to 0 and unchecks all the checkboxes. 
            </summary>
            <param name="resetLists">If true the index of all lists will be set to 0.</param>
            <param name="resetCheckboxes">If true all the checkboxes will be unchecked.</param>
        </member>
        <member name="P:RAGENativeUI.UIMenu.Visible">
            <summary>
            Change whether this menu is visible to the user.
            </summary>
        </member>
        <member name="P:RAGENativeUI.UIMenu.CurrentSelection">
            <summary>
            Returns the current selected item's index.
            Change the current selected item to index. Use this after you add or remove items dynamically.
            </summary>
        </member>
        <member name="P:RAGENativeUI.UIMenu.IsUsingController">
            <summary>
            Returns false if last input was made with mouse and keyboard, true if it was made with a controller.
            </summary>
        </member>
        <member name="P:RAGENativeUI.UIMenu.Title">
            <summary>
            Returns the title object.
            </summary>
        </member>
        <member name="P:RAGENativeUI.UIMenu.Subtitle">
            <summary>
            Returns the subtitle object.
            </summary>
        </member>
        <member name="P:RAGENativeUI.UIMenu.CounterPretext">
            <summary>
            String to pre-attach to the counter string. Useful for color codes.
            </summary>
        </member>
        <member name="P:RAGENativeUI.UIMenu.CounterOverride">
            <summary>
            Gets or sets the text that overrides the counter string.
            <para>
            If <c>null</c> the counter string isn't overrided.
            </para>
            </summary>
            <value>
            The text that overrides the counter string.
            </value>
        </member>
        <member name="P:RAGENativeUI.UIMenu.ParentMenu">
            <summary>
            If this is a nested menu, returns the parent menu. You can also set it to a menu so when pressing Back it goes to that menu.
            </summary>
        </member>
        <member name="P:RAGENativeUI.UIMenu.ParentItem">
            <summary>
            If this is a nested menu, returns the item it was binded to.
            </summary>
        </member>
    </members>
</doc>
